<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="kopo.poly.persistance.mapper.IUserInfoMapper">

	<!-- 회원가입하기(회원정보 등록하기) -->
	<insert id="insertUserInfo" parameterType="UserInfoDTO">
		INSERT INTO USER_INFO
			(
			 	USER_EMAIL,
			 	USER_NAME,
			 	PASSWORD,
			 	AGE,
			 	SEX,
			 	USER_ID,
			 	TLV_INT,
			 	CAR_YN
			)
			VALUES(
				   #{user_email},
				   #{user_name},
				   #{password},
				   #{age},
				   #{sex},
				   #{user_id},
			       #{tlv_int},
			       #{car_yn}
				  )
	</insert>

	<!-- 이메일로 회원 가입 중복 방지하기 -->
	<select id="getUserExists" parameterType="UserInfoDTO" resultType="UserInfoDTO">
		SELECT (CASE WHEN COUNT(1) THEN 'Y' ELSE 'N' END )AS EXISTS_YN
			FROM USER_INFO
		WHERE USER_EMAIL = #{user_email}
	</select>

	<!---회원가입 로그인하기  -->
	<select  id="getUserLoginCheck"  parameterType="UserInfoDTO" resultType="UserInfoDTO">
		SELECT USER_SEQ,USER_EMAIL,USER_NAME, USER_ID
			FROM USER_INFO WHERE USER_EMAIL = #{user_email} AND PASSWORD = #{password}
			</select>
	<!--사용자 아이디찾기-->
	<select id="findUserId" parameterType="UserInfoDTO"
			resultType="UserInfoDTO">
		SELECT USER_NAME,USER_EMAIL
		FROM USER_INFO
		WHERE USER_NAME= #{user_name} AND AGE= #{age}
	</select>

	<!--사용자 비밀번호변경-->
	<update id="updateUserPw" parameterType="UserInfoDTO">
		UPDATE USER_INFO
		SET PASSWORD = #{password}
		WHERE USER_EMAIL = #{user_email}
	</update>

	<!-- 유저 정보 변경  -->
	<update id="UpdateUserPage" parameterType="UserInfoDTO">
	UPDATE USER_INFO
	SET AGE = #{age},
		SEX = #{sex},
	    TLV_INT = #{tlv_int},
	    CAR_YN = #{car_yn}
	WHERE USER_EMAIL = #{user_email}
	</update>

	<!--사용자 마이페이지 정보가져오기 -->
	<select  id="getUserInfo"  parameterType="UserInfoDTO" resultType="UserInfoDTO">
	SELECT USER_NAME, PASSWORD, USER_EMAIL, AGE, SEX, TLV_INT, MANNER_INDEX, CAR_YN
	FROM USER_INFO
	WHERE USER_EMAIL = #{user_email}
	</select>

	<!-- 회원탈퇴  -->
	<delete id="deleteUserInfo" parameterType="UserInfoDTO">
	DELETE FROM USER_INFO
	WHERE USER_EMAIL = #{user_email}
</delete>

	<insert id="addFriend" parameterType="FriendDTO">
		INSERT INTO FRIEND
		(
			USER_SEQ,
		 	RECEIVE_USER,
		 	VALUE

		)
		VALUES (
		    #{user_seq},
		    #{receive_user},
		    0
		)
	</insert>
	<select id="getFriendList" parameterType="FriendDTO" resultType="UserInfoDTO">
		SELECT
			A.user_seq,
			A.user_name,
			B.value,
			A.user_email
		FROM yuDB.USER_INFO A
				 INNER JOIN yuDB.FRIEND B
							ON A.user_seq = B.user_seq and B.RECEIVE_USER = #{receive_user}
	</select>
 <!-- 친구 값이 1이라면 친구목록에 보여주고 0이라면 친구신청목록에 보여줌-->
	<update id="friendCheck" parameterType="FriendDTO">
		UPDATE FRIEND
		SET VALUE = 1
		WHERE USER_SEQ = #{user_seq} AND RECEIVE_USER = #{receive_user}
	</update>
<!-- 친구값이 1이라면 이름  PK번호와 유저이름을 가져와서 비교하여 맞으면 1값으로 올려준다.-->
	<select id="getFriendList2" parameterType="FriendDTO" resultType="UserInfoDTO">
		SELECT
			A.user_seq,
			A.user_name,
			B.value
		FROM yuDB.USER_INFO A
				 INNER JOIN yuDB.FRIEND B
							ON A.user_seq = B.user_seq and B.RECEIVE_USER = #{receive_user} and B.VALUE = 1
	</select>
	<!--친구 평가에서 나온 결과인 manner 저장-->
	<!--쿼리문 수정
	if manner_index != null = a.manner_index + b.manner_index / 2
	if manner_index == null = manner_index = #{manner_index}
	where user_email = #{user_email}
		UPDATE USER_INFO
			<set>
				<if test="manner_index != null>
	-->
	<update id="insertManner" parameterType="UserInfoDTO">
		UPDATE USER_INFO
		SET MANNER_INDEX =
		    (SELECT (U.MANNER_INDEX + #{manner_index} ) / 2 FROM USER_INFO U WHERE U.USER_EMAIL = #{user_email})
		WHERE USER_EMAIL = #{user_email}
	</update>

	<!--친구 삭제하기-->
	<delete id="friendDelete" parameterType="FriendDTO">
		DELETE FROM FRIEND
		WHERE USER_SEQ = #{user_seq} ANd RECEIVE_USER = #{receive_user}
	</delete>


</mapper>